package com.accenture.bars.controller;

import java.io.File;

import javax.ws.rs.core.MediaType;

import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.accenture.bars.circuitbreaker.BarsHystrix;
import com.accenture.bars.domain.Account;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientHandlerException;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;

/**
 * BarsController Class
 *
 * @author christian.p.c.mirano
 * @since 17.10.18
 */

/**
 * BarsController - controller of the Bars Web App
 *
 */

@EnableCircuitBreaker
@Controller
public class BarsController {

	@Autowired
	BarsHystrix barsHystrix;
	String role;

	@RequestMapping(value = "/bars")
	public String roleFromAccount(
			@RequestParam(value = "rights", required = false) String role,
			Model model){
		String page = "";

		if("admin".equals(role)) {
			page = "barsadmin";
		} else if ("user".equals(role)) {
			page = "barsnonadmin";
		}
		this.role = role;
		model.addAttribute("rights", role);

		return page;
	}
	
	
	//////////////////////////////////////////////////////////////////
	//////////////////////////	EDIT	/////////////////////////////
	/////////////////////////////////////////////////////////////////
	@RequestMapping(value = "/updatebars")
	public ModelAndView updatePage(@RequestParam("accountId") int accountId) throws JSONException {
		ModelAndView mv = new ModelAndView();
 
			String url = "http://localhost:2000/bars/getaccounts/" + accountId;
			Client client = new Client();
			WebResource wr = client.resource(url);
			ClientResponse cr = wr.type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
 
			Account account = new Account(cr.getEntity(String.class));
			account.addModelAndView(mv);
			mv.setViewName("updatebarsaccount");
	
		return mv;
	}
	
	////////////////////////////////////////////////////////////
	@RequestMapping(value = "/updatebarsprocess")
	public ModelAndView updateAccount(
			@RequestParam("accountId") int accountId,
			@RequestParam("accountName") String accountName,
//			@RequestParam("dateCreated") Timestamp dateCreated,
			@RequestParam("isActive") String isValid,
			@RequestParam("lastEdited") String lastEdited) throws UniformInterfaceException, ClientHandlerException, JSONException {
//		ModelAndView mv = new ModelAndView();
		Account account = new Account(accountId,accountName, isValid, lastEdited);
		
				String url = "http://localhost:2000/bars/updatebarsaccount";
				Client client = new Client();
				WebResource wr = client.resource(url);
				ClientResponse cr = wr.type(MediaType.APPLICATION_JSON).put(ClientResponse.class, account.toJson());
				cr.getEntity(String.class);
 
//				mv.setViewName("listaccount");
 
 
		return new ModelAndView("redirect:http://localhost:2018/listactive");
	}
	
	////////////////////////////////////////////////////////////
	
	@RequestMapping(value = "/updatebars")
	public ModelAndView updatePage(@RequestParam("accountId") int accountId) throws JSONException {
		ModelAndView mv = new ModelAndView();

		if(role.equals("admin")) {
			String url = "http://localhost:2000/bars/getaccount/" + accountId;
			Client client = new Client();
			WebResource wr = client.resource(url);
			ClientResponse cr = wr.type(MediaType.APPLICATION_JSON).get(ClientResponse.class);

			Account account = new Account(cr.getEntity(String.class));
			account.addModelAndView(mv);
			mv.setViewName("updatebarsaccount");
		}
		return mv;
	}
	
	
	
	
	
	////////////////////////////////////////////////////////////////////
	//////////////////	EDIT END ///////////////////////////////////////
	///////////////////////////////////////////////////////////////////

	@RequestMapping(value = "/")
	public String goToBarsHome() {
		String page = "";
		if("admin".equals(role)) {
			page = "barsadmin";
		} else if ("user".equals(role)) {
			page = "barsnonadmin";
		}
		return page;
	}

	@RequestMapping(value = "/process")
	public ModelAndView processRequest(@RequestParam("files") File file) throws JSONException {

		return barsHystrix.execute(file, role);
	}
	
	

}